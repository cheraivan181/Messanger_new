@page "/signin"

@inject IAuthService _authService
@inject NavigationManager _navigationManager

@using Front.Domain.FormModels
@using Front.Services.Interfaces.Auth


<div class="container">
    <div class="card card-container">
        <img id="profile-img" class="profile-img-card" src="//ssl.gstatic.com/accounts/ui/avatar_2x.png" />
        <p id="profile-name" class="profile-name-card"></p>
        <EditForm Model="AuthModel" OnValidSubmit="SignInAsync" class="form-signin">
            <DataAnnotationsValidator />
            <span id="reauth-email" class="reauth-email"></span>
            <InputText id="email" class="form-control" @bind-Value="AuthModel.UserName"/>
            <ValidationMessage For="@(() => AuthModel.UserName)" />
            <InputText type="password" id="password" class="form-control" @bind-Value="AuthModel.Password" />
            <ValidationMessage For="@(() => AuthModel.Password)" />
            <button class="btn btn-lg btn-primary btn-block btn-signin" type="submit">Login</button>
        </EditForm>
        <NavLink href="/signup" Match="NavLinkMatch.All">Register</NavLink>
        @if (!string.IsNullOrEmpty(AuthError))
        {
            <p>@AuthError</p>
        }
    </div>
</div>

@code {

    private AuthModel AuthModel = new AuthModel();
    private string AuthError;

    public async Task SignInAsync()
    {
        var authService = await _authService.SignInAsync(AuthModel);
        if (authService.IsSucess)
            _navigationManager.NavigateTo("/messanger");
        else
            AuthError = authService.ErrorMessage;
    }
}
