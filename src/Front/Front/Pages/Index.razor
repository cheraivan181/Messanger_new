@page "/"
@using Front.Services.Interfaces.Alive
@using Front.Services.Interfaces.Auth

@inject IAliveService _aliveService;
@inject NavigationManager _navigationManager;
@inject AuthenticationStateProvider _authStateProvider;
@inject IAuthService _authService;

@if (!IsApiAlive)
{
    <p>Api is not alive. Try later...</p>
}

@code {
    private bool IsApiAlive = true;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsApiAlive = await _aliveService.IsApiAliveAsync();

        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity.IsAuthenticated;

        if (authState.User.Identity.IsAuthenticated)
        {
            await _authService.UpdateRefreshTokenAsync();
            _navigationManager.NavigateTo("/messanger");
        }
        else
        {
            _navigationManager.NavigateTo("signin");
        }
    }
}

