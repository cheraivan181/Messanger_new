@page "/"
@using Front.Services.Interfaces.Alive
@using Front.Services.Interfaces.Auth
@using Front.Services.Interfaces.Dialogs

@inject IAliveService _aliveService;
@inject NavigationManager _navigationManager;
@inject AuthenticationStateProvider _authStateProvider;
@inject IAuthService _authService;
@inject IDialogManagerService _dialogManagerService;
@inject MessageDialogStateContainer _stateContainer;


@implements IDisposable;

@if (!IsApiAlive)
{
    <p>Api is not alive. Try later...</p>
}

<p>Enter a dialog</p>

@code {
    private bool IsApiAlive = true;

    protected async override Task OnInitializedAsync()
    {
        _stateContainer.OnChange += StateHasChanged;

        await base.OnInitializedAsync();

        IsApiAlive = await _aliveService.IsApiAliveAsync();

        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity.IsAuthenticated;

        if (authState.User.Identity.IsAuthenticated)
        {
            await _authService.UpdateRefreshTokenAsync();

            if (_stateContainer.Dialogs.Count == 0)
                _stateContainer.Dialogs = await _dialogManagerService.GetDialogsAsync();

            var dialog = _stateContainer.Dialogs.OrderByDescending(x => x.LastMessageDate)
                .FirstOrDefault();

            if (dialog != null)
                _navigationManager.NavigateTo($"/dialog/{dialog.DialogId}");
        }
        else
        {
            _navigationManager.NavigateTo("signin");
        }
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }
}

