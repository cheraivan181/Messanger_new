@page "/signup"

@inject IAuthService _authService
@inject NavigationManager _navigationManager

@using Front.Domain.FormModels
@using Front.Services.Interfaces.Auth

<div class="container">
    <div class="card card-container">
        <img id="profile-img" class="profile-img-card" src="//ssl.gstatic.com/accounts/ui/avatar_2x.png" />
        <p id="profile-name" class="profile-name-card"></p>

        <EditForm Model="RegisterModel" OnValidSubmit="SignUpAsync" class="form-signin">
            <DataAnnotationsValidator />
            <InputText id="email" class="form-control" @bind-Value="RegisterModel.UserName" placeholder="username"/>
            <ValidationMessage For="@(() => RegisterModel.UserName)" />
            
            <InputText id="email" class="form-control" @bind-Value="RegisterModel.Email" placeholder="email"/>
            <ValidationMessage For="@(() => RegisterModel.Email)" />
            <InputText id="email" class="form-control" @bind-Value="RegisterModel.Phone" placeholder="phone"/>
            <ValidationMessage For="@(() => RegisterModel.Phone)" />
            <InputText type="password" id="password" class="form-control" @bind-Value="RegisterModel.Password" placeholder="password"/>
            <ValidationMessage For="@(() => RegisterModel.Password)" />
            <button class="btn btn-lg btn-primary btn-block btn-signin" type="submit">Register</button>     
        </EditForm>
        <NavLink href="/signin" Match="NavLinkMatch.All">Login</NavLink>
        @if (!string.IsNullOrEmpty(RegisterError))
        {
           <p>@RegisterError</p>
        }
    </div>
</div>

@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private string RegisterError;

    public async Task SignUpAsync()
    {
        var authService = await _authService.SignUpAsync(RegisterModel);
        if (authService.IsSucess)
            _navigationManager.NavigateTo("/messanger");
        else
            RegisterError = authService.ErrorMessage;
    }
}
