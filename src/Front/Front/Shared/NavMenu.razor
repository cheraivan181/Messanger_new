@using Front.Clients.Interfaces
@using Front.ClientsDomain.Responses.Dialog
@using Front.ClientsDomain.Responses.Search
@using Front.Services.Interfaces.Dialogs

@inject ISearchClient _searchClient
@inject IDialogManagerService _dialogService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Front</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <section style="margin-bottom: 10px">
                    <input type="text" class="form-control" placeholder="Search by username" 
                        @bind-value="@SearchedUser" @bind-value:event="oninput" @onkeyup="async () => await SearchChangedAsync()" />
                </section>
                @foreach (var user in SearchUserResponse.SearchUserResults)
                {
                    <Front.Components.Contact UserName="@user.UserName"></Front.Components.Contact>
                }
                @foreach (var dialog in Dialogs)
                {
                     <Front.Components.Contact UserName="@dialog.UserName"></Front.Components.Contact>
                }
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="signIn" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> SignIn
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="signUp" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> SignUp
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string SearchedUser { get; set; }

    private SearchUserResponse SearchUserResponse = new SearchUserResponse();
    private List<GetDialogResponse.Dialog> Dialogs = new List<GetDialogResponse.Dialog>();

    private async Task SearchChangedAsync()
    {
        SearchUserResponse.SearchUserResults = new List<SearchUserModel>();
        var response = await _searchClient.SearchUserByUserNameAsync(SearchedUser);
        if (response.IsSucess)
        {
            SearchUserResponse = response.SucessResponse.Response;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Dialogs = await _dialogService.GetDialogsAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
