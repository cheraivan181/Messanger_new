@using Front.Domain.Dialogs
@using Front.Pages
@using Front.Services.Interfaces.Dialogs

@implements IDisposable
@inject IDialogManagerService _dialogManagerService;
@inject StateContainer _stateContainer;

@if (IsInitialized)
{
    <li class="ks-item">
        <NavLink href="@GetHref()" Match="NavLinkMatch.All">
            <span class="ks-avatar">
                <img src="https://bootdey.com/img/Content/avatar/avatar3.png" width="36" height="36">
            </span>
            <div class="ks-body">
                <div class="ks-name">
                    @CurrentDialog.UserName
                    <span class="ks-datetime">Activity</span>
                </div>
                <div class="ks-message">Last message</div>
            </div>
        </NavLink>
    </li>
}

@code {

    [Parameter]
    public Guid DialogId{ get; set; }

    private DialogDomainModel CurrentDialog { get; set; }

    private bool IsInitialized { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _stateContainer.OnChange += StateHasChanged;

        if (_stateContainer.Dialogs.Count == 0)
            _stateContainer.Dialogs = await _dialogManagerService.GetDialogsAsync();

        CurrentDialog = _stateContainer.Dialogs.FirstOrDefault(x => x.DialogId == DialogId);
        IsInitialized = true;

        await base.OnInitializedAsync();
    }

    private string GetHref()
    {
        return $"/dialog/{CurrentDialog.DialogId}";
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }
}
